
" Represents a packet for the Day16 solution "
Day16Packet = (
    | version typeId payload |

    version = ( ^ version )
    typeId = ( ^ typeId )
    payload = ( ^ payload )

    version: newVersion = ( version := newVersion )
    typeId: newTypeId = ( typeId := newTypeId )
    payload: newPayload = ( payload := newPayload )

    asString = ( ^ 'Packet ( version: ' + version + ', typeId: ' + typeId + ' )' )
    print = ( system printString: self asString )
    println = ( system printString: self asString + '\n' )

    sumVersions = (
        | subpackets |

        payload class = Array ifTrue: [
            ^ payload inject: version into: [ :acc :it | acc + it sumVersions ].
        ].

        ^ version.
    )

    evaluate = (
        typeId = 4 ifTrue: [ ^ payload ].

        typeId = 0 ifTrue: [
            ^ payload inject: 0 into: [ :acc :it | acc + it evaluate ].
        ].

        typeId = 1 ifTrue: [
            ^ payload inject: 1 into: [ :acc :it | acc * it evaluate ].
        ].

        typeId = 2 ifTrue: [
            ^ payload inject: nil into: [ :acc :it |
                it := it evaluate.
                acc ifNil: it ifNotNil: [ acc min: it ].
            ].
        ].

        typeId = 3 ifTrue: [
            ^ payload inject: nil into: [ :acc :it |
                it := it evaluate.
                acc ifNil: it ifNotNil: [ acc max: it ].
            ].
        ].

        typeId = 5 ifTrue: [
            | lhs rhs |
            lhs := (payload at: 1) evaluate.
            rhs := (payload at: 2) evaluate.
            ^ lhs > rhs ifTrue: 1 ifFalse: 0.
        ].

        typeId = 6 ifTrue: [
            | lhs rhs |
            lhs := (payload at: 1) evaluate.
            rhs := (payload at: 2) evaluate.
            ^ lhs < rhs ifTrue: 1 ifFalse: 0.
        ].

        typeId = 7 ifTrue: [
            | lhs rhs |
            lhs := (payload at: 1) evaluate.
            rhs := (payload at: 2) evaluate.
            ^ lhs = rhs ifTrue: 1 ifFalse: 0.
        ].
    )
)
